// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: netprotocols/netprotocols.proto

package netprotocols

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DicegameprotocolsClient is the client API for Dicegameprotocols service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DicegameprotocolsClient interface {
	SharePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error)
	SendCommitment(ctx context.Context, in *HashMessage, opts ...grpc.CallOption) (*Reply, error)
	SendMessage(ctx context.Context, in *ControlMessage, opts ...grpc.CallOption) (*Void, error)
}

type dicegameprotocolsClient struct {
	cc grpc.ClientConnInterface
}

func NewDicegameprotocolsClient(cc grpc.ClientConnInterface) DicegameprotocolsClient {
	return &dicegameprotocolsClient{cc}
}

func (c *dicegameprotocolsClient) SharePublicKey(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/netprotocols.Dicegameprotocols/SharePublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicegameprotocolsClient) SendCommitment(ctx context.Context, in *HashMessage, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/netprotocols.Dicegameprotocols/SendCommitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dicegameprotocolsClient) SendMessage(ctx context.Context, in *ControlMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/netprotocols.Dicegameprotocols/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DicegameprotocolsServer is the server API for Dicegameprotocols service.
// All implementations must embed UnimplementedDicegameprotocolsServer
// for forward compatibility
type DicegameprotocolsServer interface {
	SharePublicKey(context.Context, *PublicKey) (*PublicKey, error)
	SendCommitment(context.Context, *HashMessage) (*Reply, error)
	SendMessage(context.Context, *ControlMessage) (*Void, error)
	mustEmbedUnimplementedDicegameprotocolsServer()
}

// UnimplementedDicegameprotocolsServer must be embedded to have forward compatible implementations.
type UnimplementedDicegameprotocolsServer struct {
}

func (UnimplementedDicegameprotocolsServer) SharePublicKey(context.Context, *PublicKey) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePublicKey not implemented")
}
func (UnimplementedDicegameprotocolsServer) SendCommitment(context.Context, *HashMessage) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommitment not implemented")
}
func (UnimplementedDicegameprotocolsServer) SendMessage(context.Context, *ControlMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDicegameprotocolsServer) mustEmbedUnimplementedDicegameprotocolsServer() {}

// UnsafeDicegameprotocolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DicegameprotocolsServer will
// result in compilation errors.
type UnsafeDicegameprotocolsServer interface {
	mustEmbedUnimplementedDicegameprotocolsServer()
}

func RegisterDicegameprotocolsServer(s grpc.ServiceRegistrar, srv DicegameprotocolsServer) {
	s.RegisterService(&Dicegameprotocols_ServiceDesc, srv)
}

func _Dicegameprotocols_SharePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DicegameprotocolsServer).SharePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netprotocols.Dicegameprotocols/SharePublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DicegameprotocolsServer).SharePublicKey(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dicegameprotocols_SendCommitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DicegameprotocolsServer).SendCommitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netprotocols.Dicegameprotocols/SendCommitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DicegameprotocolsServer).SendCommitment(ctx, req.(*HashMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dicegameprotocols_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DicegameprotocolsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netprotocols.Dicegameprotocols/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DicegameprotocolsServer).SendMessage(ctx, req.(*ControlMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Dicegameprotocols_ServiceDesc is the grpc.ServiceDesc for Dicegameprotocols service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dicegameprotocols_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netprotocols.Dicegameprotocols",
	HandlerType: (*DicegameprotocolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SharePublicKey",
			Handler:    _Dicegameprotocols_SharePublicKey_Handler,
		},
		{
			MethodName: "SendCommitment",
			Handler:    _Dicegameprotocols_SendCommitment_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Dicegameprotocols_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netprotocols/netprotocols.proto",
}
